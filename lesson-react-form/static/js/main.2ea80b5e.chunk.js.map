{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/reducer_posts.js","components/post_index.js","components/post_new.js","components/post_show.js","index.js"],"names":["FETCH_POSTS","CREATE_POST","FETCH_POST","DELETE_POST","ROOT_URL","API_KEY","rootReducer","combineReducers","posts","state","arguments","length","undefined","action","type","_","omit","payload","mapKeys","data","post","newState","Object","objectSpread","id","form","formReducer","PostIndex","this","props","fetchPosts","react_default","a","createElement","className","Link","to","renderPost","map","key","concat","title","Component","connect","request","axios","get","PostNew","field","_field$meta","meta","touched","error","label","assign","input","values","_this","createPost","history","push","handleSubmit","onSubmit","bind","Field","name","component","renderField","reduxForm","validate","errors","categories","content","callback","then","PostShow","fetchPost","match","params","deletePost","onClick","onDeleteClick","_ref","ownProps","delete","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","es","store","reducers","window","__REDUX_DEVTOOLS_EXTENSION__","HashRouter","Switch","Route","path","document","querySelector"],"mappings":"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","file":"static/js/main.2ea80b5e.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport const FETCH_POSTS = 'fetch_posts';\nexport const CREATE_POST = 'create_post';\nexport const FETCH_POST = 'fetch_post';\nexport const DELETE_POST = 'delete_post';\n\nconst ROOT_URL = 'https://reduxblog.herokuapp.com/api';\nconst API_KEY = '?key=kal';\n\nexport function fetchPosts() {\n    const request = axios.get(`${ROOT_URL}/posts${API_KEY}`);\n\n    return {\n        type: FETCH_POSTS,\n        payload: request,\n    }\n}\n\n\nexport function createPost(values, callback) {\n    const request = axios.post(`${ROOT_URL}/posts${API_KEY}`, values).then(() => callback());\n\n    return {\n        type: CREATE_POST,\n        payload: request,\n    }\n\n}\n\nexport function fetchPost(id) {\n    const request = axios.get(`${ROOT_URL}/posts/${id}${API_KEY}`);\n\n    return {\n        type: FETCH_POST,\n        payload: request,\n    }\n}\n\nexport function deletePost(id, callback) {\n    axios.delete(`${ROOT_URL}/posts/${id}${API_KEY}`)\n        .then(() => {\n            callback();\n        });\n\n    return {\n        type: DELETE_POST,\n        payload: id,\n    }\n}","import {combineReducers} from 'redux';\nimport {reducer as formReducer} from 'redux-form';\nimport PostReducer from \"./reducer_posts\";\n\nconst rootReducer = combineReducers({\n    posts: PostReducer,\n    form: formReducer,\n});\n\nexport default rootReducer;\n","import { FETCH_POSTS, FETCH_POST, DELETE_POST } from '../actions/index';\nimport _ from 'lodash';\n\nexport default function (state = [], action) {\n    switch (action.type) {\n        case DELETE_POST:\n            return _.omit(state, action.payload);\n        case FETCH_POSTS:\n            return _.mapKeys(action.payload.data, 'id')\n        case FETCH_POST:\n            const post = action.payload.data;\n            const newState = { ...state };\n            newState[post.id] = post;\n            return newState;\n        //return {...state, [action.payload.data.id]: action.payload.data}\n        default:\n            return state;\n    }\n}\n","import React, { Component } from 'react';\nimport { fetchPosts } from '../actions';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport _ from 'lodash';\n\nclass PostIndex extends Component {\n    componentDidMount() {\n        this.props.fetchPosts();\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"text-xs-right\">\n                    <Link to=\"/posts/new\" className=\"btn btn-primary\">\n                        Add a post\n                    </Link>\n                </div>\n                <h3>Posts</h3>\n                <ul className=\"list-group\">\n                    {this.renderPost()}\n                </ul>\n            </div>\n        );\n    }\n\n    renderPost() {\n        return _.map(this.props.posts, post => {\n            return (\n                <li className=\"list-group-item\" key={post.id}>\n                    <Link to={`/posts/${post.id}`}>\n                    {post.title}\n                    </Link>\n                </li>\n            )\n        });\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        posts: state.posts\n    };\n}\n\nexport default connect(mapStateToProps, { fetchPosts })(PostIndex);\n","import React, {Component} from 'react';\nimport {Field, reduxForm} from 'redux-form';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {createPost} from \"../actions\";\n\n\nclass PostNew extends Component {\n\n    renderField(field) {\n\n        const {meta: {touched, error}} = field;\n        const className = `form-group ${touched && error ? 'has-danger' : ''}`\n\n        return (\n            <div className={className}>\n                <label>{field.label}</label>\n                <input\n                    className=\"form-control\"\n                    type=\"text\"\n                    {...field.input}\n                />\n\n                {touched ? error : ''}\n            </div>\n        )\n    }\n\n    onSubmit(values) {\n\n        this.props.createPost(values, () => {\n            this.props.history.push('/');\n        });\n    }\n\n    render() {\n        const {handleSubmit} = this.props;\n        return (\n            <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n                <Field\n                    label=\"Title\"\n                    name=\"title\"\n                    component={this.renderField}\n                />\n                <Field\n                    label=\"Categories\"\n                    name=\"categories\"\n                    component={this.renderField}\n                />\n                <Field\n                    label=\"Post content\"\n                    name=\"content\"\n                    component={this.renderField}\n                />\n                <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n                <Link to=\"/\" className=\"btn btn-danger\">Cancel</Link>\n            </form>\n        )\n    }\n}\n\nfunction validate(values) {\n    const errors = {};\n\n    if (!values.title) {\n        errors.title = \"enter a title!\"\n    }\n\n    if (!values.categories) {\n        errors.categories = \"enter a categories!\"\n    }\n\n    if (!values.content) {\n        errors.content = \"enter some content please!\"\n    }\n\n    return errors;\n}\n\nexport default reduxForm({\n    validate: validate,\n    form: 'PostNewForm',\n})(\n    connect(null, {createPost})(PostNew)\n);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPost, deletePost } from '../actions';\nimport { Link } from 'react-router-dom';\n\n\nclass PostShow extends Component {\n\n    componentDidMount() {\n        if (!this.props.post) {\n            this.props.fetchPost(this.props.match.params.id);\n        }\n    }\n\n    onDeleteClick() {\n        const id = this.props.match.params.id;\n        this.props.deletePost(id, () => {\n            this.props.history.push('/');\n        });\n    }\n\n    render() {\n        const { post } = this.props;\n\n        if (!post) {\n            return <div>Loading</div>\n        }\n\n        return (\n            <div>\n                <Link to=\"/\">Back to index</Link>\n                <button\n                    className=\"btn btn-danger pull-xs-right\"\n                    onClick={this.onDeleteClick.bind(this)}\n                >\n                    Delete Post\n                </button>\n                <h3>{post.title}</h3>\n                <h6>{post.categories}</h6>\n                <p>{post.content}</p>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ posts }, ownProps) => {\n    return {\n        post: posts[ownProps.match.params.id],\n    }\n};\n\nexport default connect(mapStateToProps, { fetchPost, deletePost })(PostShow);\n","import React, {Component, Fragment} from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport {Provider} from 'react-redux';\nimport ReduxPromise from 'redux-promise';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\n\nimport reducers from './reducers';\n\nimport PostIndex from './components/post_index';\nimport PostNew from './components/post_new';\nimport PostShow from './components/post_show';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())}>\n        <Router>\n            <Switch>\n                <Route path=\"/posts/new\" component={PostNew} />\n                <Route path=\"/posts/:id\" component={PostShow} />\n                <Route  path=\"/\" component={PostIndex} />\n            </Switch>\n        </Router>\n    </Provider>,\n    document.querySelector('#root'),\n);\n"],"sourceRoot":""}